/*******************************************************************************
 * Copyright (c) 2014 itemis AG (http://www.itemis.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.franca.compdeploymodel.dsl.GenerateFDeploy

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var file.extensions = "fdepl"
var projectName = "org.franca.compdeploymodel.dsl"
var runtimeProject = "../${projectName}"
var grammarURI = "platform:/resource/${projectName}/src/org/franca/compdeploymodel/dsl/FDeploy.xtext"


Workflow {
    bean = StandaloneSetup {
    	
		// use an XtextResourceSet throughout the process, which is able to resolve classpath:/ URIs.
		resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
		    	
        scanClassPath = true
        platformUri = "${runtimeProject}/.."

        registerGeneratedEPackage = "org.franca.core.franca.FrancaPackage"
        registerGenModelFile = "platform:/resource/org.franca.core/model/franca.genmodel"
        
        /* 2017-07-28: Bernhard Hennlich (BMW AG: extension for component model) */
        registerGeneratedEPackage = "org.franca.compmodel.dsl.fcomp.FcompPackage"
        registerGenModelFile = "platform:/resource/org.franca.compmodel.dsl/model/generated/FComp.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		// make sure we use the resourceSet created during standalone setup.
		resourceSet = theResourceSet
		
		genModel = "platform:/resource/${projectName}/model/FDeploy.genmodel"
        srcPath = "platform:/resource/${projectName}/src-gen"			
	}
	
    component = Generator {
		// Don't merge manifest files as they are checked out read-only by default.
		// Note that this might make manual merges necessary, see MANIFEST.MF_gen
		// I consider this a bug, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=323108
		mergeManifest = false
		
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "../../tests/${projectName}.tests.base"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
			// make sure we use the resourceSet created during standalone setup.
			forcedResourceSet = theResourceSet
			        	
        	loadedResource = "platform:/resource/${projectName}/model/FDeploy.ecore"
        	
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}

            // Serializer 2.0
//            fragment = serializer.SerializerFragment {
//            	generateStub = false
//            }
            
            // the serialization component (1.0)
            fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment {
            //  options = {
            //      backtrack = true
            //  }
            }

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            fragment = scoping.ImportURIScopingFragment {
            	generateXtendStub = true
            }
            //fragment = exporting.SimpleNamesFragment {}

            // scoping and exporting API
            //fragment = scoping.ImportNamespacesScopingFragment {}
            
            // adds prefix matcher for content assistent
            fragment = exporting.QualifiedNamesFragment {} 
            fragment = builder.BuilderIntegrationFragment {}

            // generator API
            fragment = generator.GeneratorFragment {
                generateMwe = false
                generateJavaMain = false
            }

            // formatter API
            fragment = formatting.FormatterFragment {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

            // generates junit test support classes into Generator#pathTestProject
//            fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}

            // provides the necessary bindings for java types integration
            //fragment = types.TypesGeneratorFragment {}

            // generates the required bindings only if the grammar inherits from Xbase
            //fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment {}
        }
    }
}
