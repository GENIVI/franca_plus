/* Copyright (C) 2017 BMW Group
 * Author: Bernhard Hennlich (bernhard.hennlich@bmw.de)
 * Author: Manfred Bathelt (manfred.bathelt@bmw.de)
 * This Source Code Form is subject to the terms of the Eclipse Public
 * License, v. 1.0. If a copy of the EPL was not distributed with this
 * file, You can obtain one at https://www.eclipse.org/legal/epl-v10.html. 
 */
grammar org.franca.compmodel.dsl.FComp with org.eclipse.xtext.common.Terminals

hidden(WS, ML_COMMENT, SL_COMMENT)

// include the Franca IDL ECore model as base
import "http://core.franca.org" as fidl

// still generate the ECore model from the Xtext
generate fcomp "http://org.franca.compmodel.dsl"

// the Ecore ecore model
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FCModel:
	// the model name is the package, so we have 
	// package names prefixed
	'package' name=FQN
	(imports+=Import)*
    (
    	(
    		tags=FCTagsDeclaration |
		    (
				components+=FCComponent |
				injects+=FCInjectedPrototype |
				instanceCreators+=FCInstanceCreator |
				devices+=FCDevice 
			)*
		)
	);

// **************************************************************
// HOWTO: use a combination of URI global scopes and namespace aware local scope provider
// this is configured in the work flow by
//			fragment = scoping.ImportURIScopingFragment {}
// and by overriding configureIScopeProviderDelegate in the runtime module with 
//			ImportedNamespaceAwareLocalScopeProvider
// the attribute 'importedNamespace' is picked up by the ImportedNamespaceAwareLocalScopeProvider
// the attribute 'importURI' is picked up by the ImportUriGlobalScopeProvider
Import: 'import' (importedNamespace=WildcardFQN 'from' | 'model') importURI=STRING;

FQN: ID ('.' ID)*;
WildcardFQN: FQN ('.' '*')?;
	
FCVersion: {FCVersion} 'version' '{' 'major' major=INT 'minor' minor=INT '}';
	
enum FCPortKind: provided|required;
enum FCPortCardinality: MANDATORY='mandatory' | OPTIONAL='optional';
enum FCInjectionModifier: finally;
	
FCTagsDeclaration:
	{FCTagsDeclaration} 
	declaredTags+=FCTagDecl+;

FCRequiredPort returns FCPort:
	{FCRequiredPort}
	comment=FCAnnotationBlock?
	cardinality?=FCPortCardinality? 'requires' interface=[fidl::FInterface|FQN] ('as' name=ID)?;

FCProvidedPort returns FCPort:
	{FCProvidedPort}
	comment=FCAnnotationBlock?
	'provides' interface=[fidl::FInterface|FQN] ('as' name=ID)?;	

FCPrototypeInjection returns FCGenericPrototype:
	{FCPrototypeInjection}
	comment=FCAnnotationBlock?
	modifier=FCInjectionModifier? 'implement' ref=[FCPrototype|FQN] ('as' name=ID)? 'by' component=[FCComponent|FQN];

FCComponent: 
	{FCComponent}
	comment=FCAnnotationBlock?
	(abstract?='abstract'? & root?='root'? & singleton?='singleton'? & service?='service'?)
	'component' name=ID ('extends' superType=[FCComponent|FQN])?
	'{'
		version=FCVersion?
		(
		 requiredPorts+=FCRequiredPort | 
		 providedPorts+=FCProvidedPort |
		 prototypes+=FCPrototype |
		 injections+=FCPrototypeInjection |
		 assembles+=FCAssemblyConnector | 
		 delegates+=FCDelegateConnector
		)*
	'}';

FCPrototype returns FCGenericPrototype:
	{FCPrototype}
	comment=FCAnnotationBlock?
	'contains' component=[FCComponent|FQN] ('as' name=ID)?;
	
FCInjectedPrototype returns FCGenericPrototype:
	{FCInjectedPrototype}
	comment=FCAnnotationBlock?
	'inject' component=[FCComponent|FQN] ('as' name=ID)? 'into' ref=[FCPrototype|FQN] modifier=FCInjectionModifier?;

FCDelegateConnector: 
	comment=FCAnnotationBlock?
	'delegate' kind=FCPortKind outer=FCOuter 'to' inner=FCInner;
	
FCOuter: port=[FCPort];
FCInner: prototype=[FCPrototype] '.' port=[FCPort];

FCAssemblyConnector:
	comment=FCAnnotationBlock?
	('connect'|'assemble') from=FCFrom 'to' to=FCTo;
	
FCFrom: prototype=[FCPrototype] '.' port=[FCRequiredPort];
FCTo: prototype=[FCPrototype] '.' port=[FCProvidedPort];

// ***************************************************************
// Partitioning of Instances to Devices
FCDevice:
	comment=FCAnnotationBlock?
	'device' name=ID
	'{' 
		instances+=FCPartitionedInstance*
	'}';
	
FCPartitionedInstance: 
	comment=FCAnnotationBlock?
	'partition'
	instance=[FCInstance|FQN]
;

// Instances implicitly created (xtext creates and links instances on the fly, 
// see proposal provider and linking service)
FCInstance:
	name=FQN
	component=[FCComponent|FQN]?;
	
FCInstanceCreator:
	comment=FCAnnotationBlock?
	'create' component=[FCComponent|FQN];
	
//FCInstance:
//	comment=FCAnnotationBlock?
//	'instance' component=[FCComponent] 
//	({FCPrototypeInstance.parent=current} '.' prototype=[FCGenericPrototype])* 
//	('as' name=ID)?;
	 
// **************************************************************
// Annotations with built-in and custom Defined Tags

FCAnnotationBlock:
	{FCAnnotationBlock}
	'<**' (elements+=FCAnnotation|ANNO_CONTINUED)* '**>';
	
terminal ANNOTATION_VALUE returns ecore::EString:
	':' ( ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\')) | ('\\*'|'\\@') | !('\\'|'*'|'@') )*;

 	
// Structured Comments can contain custom defined tags
terminal AT_ALPHA_NUMERIC_ID returns ecore::EString:
	'@' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9')*
;
TAG_ID: AT_ALPHA_NUMERIC_ID;
	
terminal ANNO_CONTINUED: '**';

// annotation are by default custom (=0)
enum FCCustomAnnotationType returns FCAnnotationType: custom;
enum FCBuiltinAnnotationType returns FCAnnotationType: 
	deprecated='@deprecated'|
	description='@description'|
	experimental='@experimental'|
	author='@author'|
	see='@see' |
	details='@details';

enum FCPredefinedTypeId: String;
FCTagDecl:
	'tag' type=FCPredefinedTypeId name=TAG_ID (mandatory?='mandatory')?;

FCAnnotation returns FCAnnotation: 
	(kind=FCBuiltinAnnotationType | tag=[FCTagDecl|TAG_ID])
	value=ANNOTATION_VALUE?;
