/* Copyright (C) 2018 BMW Group
 *  
 * This Source Code Form is subject to the terms of the Eclipse Public
 * License, v. 1.0. If a copy of the EPL was not distributed with this
 * file, You can obtain one at https://www.eclipse.org/legal/epl-v10.html. 
 *
 * Version 1.0
 *
 * This is the Franca deployment specification to be used for SOME/IP networking.
 * It contains all available configuration parameters for the
 * SOME/IP protocol and refers to the architecture deployment concept.
 */

package network

import "platform:/plugin/org.franca.architecture/deployment/architecture_deployment_spec.cdepl"

specification someip extends system.architecture {

	for devices {
	}
	
	for adapters {
		SomeIpUnicastAddress:        String                          (default: "");
	}
	
    for provided_ports {
        SomeIpInstanceID:            Integer                         ;

        SomeIpReliableUnicastPort:   Integer                         (default: 0);
        SomeIpUnreliableUnicastPort: Integer                         (default: 0);

        /*
         * The following three properties must be used together, meaning the configuration of
         * multicast address and port for an eventgroup is done by setting
         *    SomeIpMulticastEventGroup[X] = <eventgroup identifier>
         *    SomeIpMulticastAddresses[X] = <multicast address for SomeIpMulticastEventGroups[X]>
         *    SomeIpMulticastPorts[X] = <multicast port for SomeIpMulticastEventGroups[X]>
         *    SomeIpMulticastThreshold[X] = <specifies when to use multicast and when to use unicast to send a notification event. Must be set to a non-negative number.
		 *									If it is set to zero, all events of the eventgroup will be sent by unicast. Otherwise, the events will be sent by unicast as
		 *									long as the number of subscribers is lower than the threshold and by multicast if the number of subscribers is greater or
		 *									equal. This means, a threshold of 1 will lead to all events being sent by multicast. The default value is 0.
         */
        SomeIpMulticastAddresses:    String[]                        (optional);
        SomeIpMulticastEventGroups:  Integer[]                       (optional);
        SomeIpMulticastPorts:        Integer[]                       (optional);
		SomeIpMulticastThreshold:	 Integer[]						 (optional);
		
        /*
         * Define how to retrieve an error message and map it to Franca error parameters
         */
        SomeIpDefaultErrorCoding:    {Header}                        (default: Header);
    }

    for interfaces {
        SomeIpServiceID:             Integer                         ;
    }

	for attributes {
		// central configuration for an attribute
		SomeIpAttributeEndianess:    {le, be}                        (default: be);
		SomeIpAttributeCRCWidth:     {zero, one, four}               (default: zero);
		SomeIpAttributeReliable:	 Boolean						 (default: false);
		// SomeIpAttributePriority:     Integer						 (optional);
	}
	
    for attribute_getters {
        SomeIpGetterID:              Integer                         ;
        // SomeIpGetterReliable:        Boolean                        (default: false);
        // SomeIpGetterPriority:        Integer                        (optional);
        
        /*
         * maximum retention time to send messages in milliseconds 
         */
        SomeIpGetterMaxRetentionTime:		 Integer					(default: 0);
    }

    for attribute_setters {
        SomeIpSetterID:              Integer                         	;
        // SomeIpSetterReliable:        Boolean                         (default: false);
        // SomeIpSetterPriority:        Integer                         (optional);

        /*
         * maximum retention time to send messages in milliseconds 
         */
        SomeIpSetterMaxRetentionTime:		 Integer						(default: 0);
    }

    for attribute_notifiers {
        SomeIpNotifierID:            Integer                         ;
        // SomeIpNotifierReliable:      Boolean                         (default: false);
        // SomeIpNotifierPriority:      Integer                         (optional);
        // SomeIpNotifierMulticast:     Boolean                         (default: false);
        SomeIpNotifierEventGroups:	 Integer[]                       (optional);

        /*
         * maximum retention time to send messages in milliseconds 
         */
        SomeIpNotifierMaxRetentionTime:		 Integer				(default: 0);
    }

    for methods {
        SomeIpMethodID:              Integer                         ;
        SomeIpReliable:              Boolean                         (default: false);
        // SomeIpPriority:              Integer                      (optional);
        
        /*
         * define how to retrieve an error message and map it to Franca error parameters
         */
        SomeIpErrorCoding:           {Header}                        (default: Header);

        SomeIpMethodEndianess:       {le, be}                        (default: be);
        SomeIpMethodCRCWidth:        {zero, one, four}               (default: zero);

        /*
         * maximum retention time to send messages in milliseconds 
         */
        SomeIpMethodMaxRetentionTime:		 Integer				(default: 0);
    }

    for broadcasts {
        SomeIpEventID:               Integer                         ;
        SomeIpReliable:              Boolean                         (default: false);
        SomeIpPriority:              Integer                         (optional);
        // SomeIpMulticast:             Boolean                         (default: false);
        SomeIpEventGroups:           Integer[]                       (optional);

        SomeIpBroadcastEndianess:    {le, be}                        (default: be);
        SomeIpBroadcastCRCWidth:     {zero, one, four}               (default: zero);

        /*
         * maximum retention time to send messages in milliseconds 
         */
        SomeIpBroadcastMaxRetentionTime:		 Integer						(default: 0);
    }

    for arrays {
        SomeIpArrayMinLength:        Integer                         (default: 0);
        SomeIpArrayMaxLength:        Integer                         (default: 0);
        /* 
         * If SomeIpArrayLengthWidth == 0, the array has SomeIpArrayMaxLength elements.
         * If SomeIpArrayLengthWidth == 1, 2 or 4 bytes, SomeIpArrayMinLength and
         * SomeIpArrayMaxLength are cut off.
         */
        SomeIpArrayLengthWidth:      Integer                         (default: 4);
    }

    for unions {
        /*
         * The length field of the union contains the size of the biggest element
         * in the union in bytes;
         * The SomeIpUnionLengthWidth determines the size of the length field;
         * allowed values are 0, 1, 2, 4.
         * 0 means that all types in the union have the same size.
         */
        SomeIpUnionLengthWidth:      Integer                         (optional);
        /*
         * 2^SomeIpUnionTypeWidth*8 different Types in the union.
         */
        SomeIpUnionTypeWidth:        Integer                         (optional);
        /*
         * True means length field before type field, false means length field
         * after type field.
         */
        SomeIpUnionDefaultOrder:     Boolean                         (optional);
        /*
         * If SomeIpUnionLengthWidth == 0, SomeIpUnionMaxLength must be set to the 
         * size of the biggest contained type.
         */
        SomeIpUnionMaxLength:        Integer                         (optional);
    }

    for structs {
        /*
         * The length field of the struct contains the size of the struct in bytes;
         * The SomeIpStructLengthWidth determines the size of the length field;
         * allowed values are 0, 1, 2, 4. 0 means that there is no length field.
         */
        SomeIpStructLengthWidth:     Integer                         (default: 0);
    }

    for enumerations {
        // Bytes of base type
        SomeIpEnumWidth:             Integer                         (default: 4);
        // Bits to serialize/deserialize
        SomeIpEnumBitWidth:          Integer                         (optional);
        // Invalid value
        SomeIpEnumInvalidValue:		 Integer						 (optional);
    }

    for strings {
        SomeIpStringLength:          Integer                         (default: 0);
        /*
         * If LengthWidth == 0, the length of the string has StringLength bytes.
         * If LengthWidth == 1, 2 or 4 bytes, SomeIpStringLength is ignored.
         */
        SomeIpStringLengthWidth:     Integer                         (default: 4);
        /*
         * utf16le LittleEndian, utf16be BigEndian.
         */
        SomeIpStringEncoding:        {utf8, utf16le, utf16be}        (default: utf8);
    }

    for byte_buffers {
        SomeIpByteBufferMaxLength:   Integer                        (default: 0);    // 0 means unlimited length
        SomeIpByteBufferMinLength:   Integer                        (default: 0);
        
        /* 
         * If SomeIpByteBufferLengthWidth == 0, the buffer has SomeIpByteBufferMaxLength elements.
         * If SomeIpByteBufferLengthWidth == 1, 2 or 4 bytes, SomeIpByteBufferMinLength and
         * SomeIpArrayMaxLength are cut off.
         */
        SomeIpByteBufferLengthWidth:   Integer                      (default: 4);
    }
}
