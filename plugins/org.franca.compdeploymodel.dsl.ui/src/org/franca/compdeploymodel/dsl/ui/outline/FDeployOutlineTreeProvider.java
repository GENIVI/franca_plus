/*
 * generated by Xtext
 */
package org.franca.compdeploymodel.dsl.ui.outline;

import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import org.franca.compdeploymodel.dsl.fDeploy.FDArgument;
import org.franca.compdeploymodel.dsl.fDeploy.FDArgumentList;
import org.franca.compdeploymodel.dsl.fDeploy.FDComplexValue;
import org.franca.compdeploymodel.dsl.fDeploy.FDComponentInstance;
import org.franca.compdeploymodel.dsl.fDeploy.FDProperty;
import org.franca.compdeploymodel.dsl.fDeploy.FDPropertySet;
import org.franca.compdeploymodel.dsl.fDeploy.FDRootElement;
import org.franca.compdeploymodel.dsl.fDeploy.FDValue;

import com.google.inject.Inject;

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
public class FDeployOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	
	@Inject 
	private IImageHelper imageHelper;
	
	protected boolean _isLeaf(FDComponentInstance feature) {
	    return true;
	}
	
	/**
	 * Provide a navigable tree structure with components and prototypes 
	 */
	protected void _createNode(IOutlineNode parentNode, FDRootElement rootElement) {		
		final Image useIcon = imageHelper.getImage("use.png");
		EObjectNode rootElementNode = createEObjectNode(parentNode, rootElement);
		if (rootElement.getUse().isEmpty() == false) {
			for (FDRootElement use: rootElement.getUse()) {
				if (use.getName() != null) {
					EObjectNode useNode = createEObjectNode(rootElementNode, use);
					useNode.setText(use.getName());
					useNode.setImage(useIcon);
				}
			}
			_createChildren(rootElementNode, rootElement);
		}
	}
	
	/**
	 * Omit the FDComplexValue element to get a neater outline 
	 */
	protected void _createNode(IOutlineNode parentNode, FDComplexValue cv) {		
		
		if (cv.getSingle() != null)
			createEObjectNode(parentNode, cv.getSingle());
		else 
			for (FDValue v: cv.getArray().getValues()) {
				createEObjectNode(parentNode, v);
			
			}
	}
	
	/**
	 * Omit properties collection element 
	 */
	protected void _createNode(IOutlineNode parentNode, FDPropertySet ps) {		
		for (FDProperty p: ps.getItems()) {
			EObjectNode element = createEObjectNode(parentNode, p);
			createChildren(element, p.getValue());
		}
	}
	
	/**
	 * Omit component instance element 
	 */
	protected void _createNode(IOutlineNode parentNode, FDComponentInstance i) {		
	}
	
	
	/**
	 * Omit argument list element 
	 */
	protected void _createNode(IOutlineNode parentNode, FDArgumentList al) {		
		for (FDArgument a : al.getArguments()) {
			EObjectNode element = createEObjectNode(parentNode, a);
			createChildren(element, a.getProperties());
			createChildren(element, a.getOverwrites());
		}
	}	
}