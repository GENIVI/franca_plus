package org.example.spec;

/*******************************************************************************
* This file has been generated by Franca's FDeployGenerator.
* Source: deployment specification 'simple'
*******************************************************************************/
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.franca.compdeploymodel.core.FDeployedComponent;
import org.franca.compdeploymodel.core.FDeployedDevice;
import org.franca.compdeploymodel.core.FDeployedInterface;
import org.franca.compdeploymodel.core.FDeployedProvider;
import org.franca.compdeploymodel.core.FDeployedService;
import org.franca.compdeploymodel.core.FDeployedTypeCollection;
import org.franca.compdeploymodel.core.MappingGenericPropertyAccessor;
import org.franca.compdeploymodel.dsl.fDeploy.FDComAdapter;
import org.franca.compdeploymodel.dsl.fDeploy.FDComponent;
import org.franca.compdeploymodel.dsl.fDeploy.FDCompoundOverwrites;
import org.franca.compdeploymodel.dsl.fDeploy.FDDevice;
import org.franca.compdeploymodel.dsl.fDeploy.FDEnumValue;
import org.franca.compdeploymodel.dsl.fDeploy.FDEnumerationOverwrites;
import org.franca.compdeploymodel.dsl.fDeploy.FDField;
import org.franca.compdeploymodel.dsl.fDeploy.FDOverwriteElement;
import org.franca.compdeploymodel.dsl.fDeploy.FDProvidedPort;
import org.franca.compdeploymodel.dsl.fDeploy.FDRequiredPort;
import org.franca.compdeploymodel.dsl.fDeploy.FDService;
import org.franca.compdeploymodel.dsl.fDeploy.FDTypeOverwrites;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FArrayType;
import org.franca.core.franca.FAttribute;
import org.franca.core.franca.FEnumerator;
import org.franca.core.franca.FField;
import org.franca.core.franca.FModelElement;

import com.google.common.collect.Maps;

/**
 * This is a collection of all interfaces and classes needed for
 * accessing deployment properties according to deployment specification
 * 'simple'.
 */
public class SpecSimpleServiceDeploymentRef {

	/**
	 * Enumerations for deployment specification simple.
	 */
	public interface Enums
	{
	}

	/**
	 * Interface for data deployment properties for 'simple' specification
	 * 
	 * This is the data types related part only.
	 */
	public interface IDataPropertyAccessor
		extends Enums
	{
		// host 'components'
		public String getComponentName(EObject obj);
		
		
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FField object. I.e., the FField obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FField which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FField obj);
	
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FArrayType object. I.e., the FArrayType obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArrayType which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj);
	}
	
	/**
	 * Accessor for deployment properties for Component and port instances
	 * according to the 'simple' specification.
	 */
	public static class ComponentPropertyAccessor
		implements Enums
	{
		final private FDeployedComponent target;
	
		public ComponentPropertyAccessor(FDeployedComponent target) {
			this.target = target;
		}
		
		// host 'components'
		public String getComponentName(FDComponent obj) {
			return target.getString(obj, "ComponentName");
		}
		
		// host 'provided_ports'
		public Integer getInstanceID(FDProvidedPort obj) {
			return target.getInteger(obj, "InstanceID");
		}
		
		// host 'required_ports'
		public Integer getSomeIpInstanceID(FDRequiredPort obj) {
			return target.getInteger(obj, "SomeIpInstanceID");
		}
		
	}
	
	/**
	 * Accessor for deployment properties for service and port instances
	 * according to the 'simple' specification.
	 */
	public static class ServicePropertyAccessor
		implements Enums
	{
		final private FDeployedService target;
	
		public ServicePropertyAccessor(FDeployedService target) {
			this.target = target;
		}
		
		// host 'services'
		public String getServiceString(FDService obj) {
			return target.getString(obj, "ServiceString");
		}
		
		// host 'provided_ports'
		public Integer getInstanceID(FDProvidedPort obj) {
			return target.getInteger(obj, "InstanceID");
		}
		
		// host 'required_ports'
		public Integer getSomeIpInstanceID(FDRequiredPort obj) {
			return target.getInteger(obj, "SomeIpInstanceID");
		}
		
	}

	/**
	 * Accessor for deployment properties for Device and port instances
	 * according to the 'simple' specification.
	 */
	public static class DevicePropertyAccessor
		implements Enums
	{
		final private FDeployedDevice target;
	
		public DevicePropertyAccessor(FDeployedDevice target) {
			this.target = target;
		}
		
		// host 'devices'
		public String getDeviceString(FDDevice obj) {
			return target.getString(obj, "DeviceString");
		}
		
		// host 'adapters'
		public String getUnicastAddress(FDComAdapter obj) {
			return target.getString(obj, "UnicastAddress");
		}
		
	}
	
	/**
	 * Helper class for data-related property accessors.
	 */		
	public static class DataPropertyAccessorHelper implements Enums
	{
		final private MappingGenericPropertyAccessor target;
		final private IDataPropertyAccessor owner;
		
		public DataPropertyAccessorHelper(
			MappingGenericPropertyAccessor target,
			IDataPropertyAccessor owner
		) {
			this.target = target;
			this.owner = owner;
		}
	
		
		protected IDataPropertyAccessor getOverwriteAccessorAux(FModelElement obj) {
			FDOverwriteElement fd = (FDOverwriteElement)target.getFDElement(obj);
			FDTypeOverwrites overwrites = fd.getOverwrites();
			if (overwrites==null)
				return owner;
			else
				return new OverwriteAccessor(overwrites, owner, target);
		}
	}

	/**
	 * Accessor for deployment properties for Franca type collections according
	 * to deployment specification 'simple'.
	 */		
	public static class TypeCollectionPropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;
	
		public TypeCollectionPropertyAccessor(FDeployedTypeCollection target) {
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		// host 'components'
		@Override
		public String getComponentName(EObject obj) {
			return target.getString(obj, "ComponentName");
		}
		
		
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for deployment properties for Franca interfaces according to
	 * deployment specification 'simple'.
	 */
	public static class InterfacePropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;
	
		public InterfacePropertyAccessor(FDeployedInterface target) {
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		// host 'components'
		@Override
		public String getComponentName(EObject obj) {
			return target.getString(obj, "ComponentName");
		}
		
		
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FAttribute object. I.e., the FAttribute obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FAttribute which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FAttribute obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FArgument object. I.e., the FArgument obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArgument which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FArgument obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for getting overwritten property values.
	 */		
	public static class OverwriteAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final IDataPropertyAccessor delegate;
		
		private final FDTypeOverwrites overwrites;
		private final Map<FField, FDField> mappedFields;
		private final Map<FEnumerator, FDEnumValue> mappedEnumerators;
	
		public OverwriteAccessor(
				FDTypeOverwrites overwrites,
				IDataPropertyAccessor delegate,
				MappingGenericPropertyAccessor genericAccessor)
		{
			this.target = genericAccessor;
			this.delegate = delegate;
	
			this.overwrites = overwrites;
			this.mappedFields = Maps.newHashMap();
			this.mappedEnumerators = Maps.newHashMap();
			if (overwrites!=null) {
				if (overwrites instanceof FDCompoundOverwrites) {
					// build mapping for compound fields
					for(FDField f : ((FDCompoundOverwrites)overwrites).getFields()) {
						this.mappedFields.put(f.getTarget(), f);
					}
				}
				if (overwrites instanceof FDEnumerationOverwrites) {
					// build mapping for enumerators
					for(FDEnumValue e : ((FDEnumerationOverwrites)overwrites).getEnumerators()) {
						this.mappedEnumerators.put(e.getTarget(), e);
					}
				}
			}
		}
		
		// host 'components'
		@Override
		public String getComponentName(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					String v = target.getString(fo, "ComponentName");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					String v = target.getString(obj, "ComponentName");
					if (v!=null)
						return v;
				}
			}
			return delegate.getComponentName(obj);
		}
		
		
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				FDTypeOverwrites overwrites = fo.getOverwrites();
				if (overwrites==null)
					return this; // TODO: correct?
				else
					// TODO: this or delegate?
					return new OverwriteAccessor(overwrites, this, target);
				
			}
			return delegate.getOverwriteAccessor(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			// check if this array is overwritten
			if (overwrites!=null) {
				// TODO: this or delegate?
				return new OverwriteAccessor(overwrites, this, target);
			}
			return delegate.getOverwriteAccessor(obj);
		}
	}
	
	/**
	 * Accessor for deployment properties for providers and interface instances
	 * according to the 'simple' specification.
	 */
	public static class ProviderPropertyAccessor
		implements Enums
	{
	
		public ProviderPropertyAccessor(FDeployedProvider target) {
		}
		
	}
}


