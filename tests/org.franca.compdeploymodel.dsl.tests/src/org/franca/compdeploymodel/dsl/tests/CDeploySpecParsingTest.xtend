/*
 * generated by Xtext 2.11.0
 */
package org.franca.compdeploymodel.dsl.tests

import com.google.inject.Inject
import com.itemis.xtext.testing.XtextTest
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import org.franca.compdeploymodel.dsl.tests.internal.CDeployTestsInjectorProvider
import org.franca.deploymodel.dsl.fDeploy.FDModel
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(CDeployTestsInjectorProvider)
class CDeploySpecParsingTest extends XtextTest {
	
	@Inject	ParseHelper<FDModel> parseHelper
	@Inject	private extension IResourceValidator validator
	
	@Before
	override void before() {
		suppressSerialization()
	}

	@Test
	def void test_simple_file() {
		testFile("platform/ServiceDeploymentSpecSimple.cdepl")
	}
	
	@Test
	def void test_simple_validation() {
		val result = parseHelper.parse('''
			package org.example
			
			specification simple {
				for structs {
					StructName : String ( default: "empty" );
				}
				for components {
					ComponentName : String ( default: "empty" );
				}
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result.eResource.resourceIsValid)	
	}
	
	@Test
	def void test_all_hosts() {
		testFile("platform/full_property_hosts_spec.cdepl")
	}
	
	private def boolean resourceIsValid(Resource resource) {
		val list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		list.forEach[System.out.println(message)]
		list.isEmpty()
	}
}
