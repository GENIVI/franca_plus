/*=========== Components belong to packages =============== */
package org.example

import org.other.* from "classpath:/org/other/SystemdComponent.fcdl"
import org.example.* from "classpath:/org/example/SystemdManager.fidl"
import org.example.* from "classpath:/org/example/PowerManagement.fidl"
import org.example.* from "classpath:/org/example/MediaPlayer.fidl"
import org.other.* from "classpath:/org/other/BluetoothManager.fidl"
import org.example.* from "classpath:/org/example/Decode.fidl"

/*=========== Simple Component declarations =============== */
component BluetoothManagerComponent {
	version { major 1 minor 0} 
	provides org.other.BluetoothManager as customPort
	requires SystemdManager as systemdPort
}

component Decoder {
	requires SystemdManager as systemManagerClient
}

component Mp3Decoder extends Decoder {
	provides org.example.Mp3Decode as mp3
}

component FlacDecoder extends Decoder {
	provides org.example.FlacDecode as flac
}

component MediaClientComponent {
	requires org.example.MediaPlayer as playerClientPort	
	requires BluetoothManager as specialBluetoothPort
}

component PlayerPartOne {
	
}

@singleton
component MediaPlayerComponent {
	provides org.example.MediaPlayer as playerPort
	requires org.example.FlacDecode as flacDecoderClientPort
	requires org.example.Mp3Decode as mp3DecoderClientPort
	contains PlayerPartOne as PlayerPart1
}

@root
component System {
	contains SystemInfrastructureImplementation as SystemInfraStructureInstance
	contains MediaPlayerCluster as TheMediaPlayerInstance
	
	connect TheMediaPlayerInstance.systemManagerClient to SystemInfraStructureInstance.systemManager
	connect TheMediaPlayerInstance.systemManagerClient2 to SystemInfraStructureInstance.systemManager
}

component SystemInfrastructure {
	provides SystemdManager as systemManager
}


component SystemInfrastructureImplementation extends SystemInfrastructure {
	
	contains PowerManagerComponent as PM
	delegate provided systemManager to PM.systemManagerSubCompPort	 
}

/*============= Composite Component ==================== */
@cluster
component MediaPlayerCluster {
	// define the hull 
	provides org.example.MediaPlayer as playerPort
	provides org.example.MediaPlayer as playerPort2
	requires org.other.BluetoothManager as bluetoothClientPort
	requires SystemdManager as systemManagerClient
	requires SystemdManager as systemManagerClient2 // ugly: requires second delegate of same type
	
	// components contained 
	contains Mp3Decoder as MDecoder 
	contains FlacDecoder as FDecoder 
	contains MediaClientComponent as MCC
	contains MediaClientComponent as MCC2
	contains MediaClientComponent as MCC3 
	contains MediaPlayerComponent as MPC
	
	// connect inner components 
	connect MPC.flacDecoderClientPort to FDecoder.flac
	connect MPC.mp3DecoderClientPort to MDecoder.mp3
	connect MCC.playerClientPort to MPC.playerPort
	connect MCC2.playerClientPort to MPC.playerPort
		
	// connect from out to in
	delegate provided playerPort to MPC.playerPort
	delegate required bluetoothClientPort to MCC.specialBluetoothPort	
	delegate required systemManagerClient to FDecoder.systemManagerClient
	// delegate required systemManagerClient2 to FDecoder.systemManagerClient
}

component SpecialMediaClientComponent {
	requires org.example.Decode as decocderClientPort
	provides org.example.MediaPlayer as playerPort
}

component PowerManagerComponent {
	provides org.example.PowerManagement as thePowerPort
	provides SystemdManager as systemManagerSubCompPort
}

component GenericDecoderComponent {
	provides org.example.Decode as decoder
}