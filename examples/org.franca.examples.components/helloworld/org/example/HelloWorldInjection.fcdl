package org.example

import org.example.* from "HelloWorld.fidl"

service component HelloWorldServer {
	provides HelloWorld2 as AskMePort
}

service component ChatterClient {}

component GenericClient {
	version { major 1 minor 2 }
	contains ChatterClient as GenericChatterClient
}

abstract component HelloWorldClient extends GenericClient {
	requires org.example.HelloWorld2 as AnswerMePort
	contains ChatterClient as HyperActiveChatterClient
	contains ChatterClient as BoringChatterClient
	contains ChatterClient as AdditionalChatterClient
}


component MeetingPoint {
	contains HelloWorldServer as Service
	
	contains HelloWorldClient as Client1
	contains DerivedHelloWorldClient2 as DerivedClient2 
	
	connect Client1.AnswerMePort to Service.AskMePort
	connect DerivedClient2.AnswerMePort to Service.AskMePort
}

// now implement in derived classes for derived types
service component DerivedChatterClient extends ChatterClient {}

component DerivedHelloWorldClient extends HelloWorldClient {
	implement HyperActiveChatterClient as InjectedHyperActiveChatterClient by DerivedChatterClient   
	implement BoringChatterClient as InjectedBoringChatterClient by DerivedChatterClient finally
}

component DerivedHelloWorldClient2 extends DerivedHelloWorldClient {}

// or replace HelloWorldClient.BoringChatterClient with an implementation of DerivedChatterClient  
// inject DerivedChatterClient into HelloWorldClient.BoringChatterClient

/* ============================== Unfold  component tree and partition services ============== */
system MeetingPoint with root MeetingPoint {
	device test
}